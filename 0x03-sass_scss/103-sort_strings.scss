@import "./103-sort_list.scss";

$sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z !default;

@function compare($string-a, $string-b, $sort-order) {
  /*Compare two strings and return the shortest first string*/
  $string-a: to-lower-case($string-a + unquote(""));
  $string-b: to-lower-case($string-b + unquote(""));

  @for $i from 1 through min(str-length($string-a), str-length($string-b)) {
    $char-a: str-slice($string-a, $i, $i);
    $char-b: str-slice($string-b, $i, $i);

    @if $char-a and
      $char-b and
      index($sort-order, $char-a) !=
      index($sort-order, $char-b)
    {
      @return index($sort-order, $char-a) < index($sort-order, $char-b);
    }
  }

  @return str-length($string-a) < str-length($string-b);
}

@function partition($list, $low, $high) {
  /* sorts one by one into list of names */
  $pivot: nth($list, $high);
  $i: $low;
  @for $j from $low to $high {
    @if compare(nth($list, $j), $pivot, $sort-order) {
      $list: swap($list, $i, $j);
      $i: $i + 1;
    }
  }
  $list: swap($list, $i, $high);

  @return $i, $list;
}

@function swap($list, $index-a, $index-b) {
  /* Swap positions into array */
  @if abs($index-a) > length($list) or abs($index-b) > length($list) {
    @return $list;
  }
  $temp: nth($list, $index-a);
  $list: set-nth($list, $index-a, nth($list, $index-b));
  $list: set-nth($list, $index-b, $temp);
  @return $list;
}

@function sorting($list, $low, $high) {
  /* sorting - Order a list recursivelly */
  @if ($low < $high) {
    $arr: partition($list, $low, $high);
    $pi: nth($arr, 1);
    $list: nth($arr, 2);

    $list: sorting($list, $low, $pi - 1);
    $list: sorting($list, $pi + 1, $high);
  }
  @return $list;
}

@function quick_sort($list) {
  /* Call to sort recursivelly function */
  $list: sorting($list, 1, length($list));

  @return $list;
}

@debug quick_sort($list_to_sort);
